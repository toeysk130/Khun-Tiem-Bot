import { Client, TextEventMessage, WebhookEvent } from "@line/bot-sdk";
import pg from "pg";
import * as dotenv from "dotenv";
import { validateLeaveRequest } from "./validateLeaveReq";
import {
  addNewLeaveRequest,
  checkIfIdExist,
  checkIfMyIdExist,
  getMemberDetails,
  pushMsg,
  registerNewMember,
  showListThisWeek,
  showListToday,
  showMyList,
  showTable,
  showWaitApprove,
  updateApproveFlag,
  updateKeyStatus,
} from "./lineAPI";
import {
  daysColor,
  tableLists,
  validKeyStatus,
  validReportTypes,
  validUpcaseMonths,
} from "./config";
import {
  getCurrentDateString,
  getCurrentWeekDate,
  getNextWeektDateString,
} from "./utils";
import { pushMessage } from "./pushMessage";

dotenv.config();
const pool = new pg.Pool();
const client = new Client({
  channelSecret: process.env.CHANNEL_SECRET || "",
  channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN || "",
});

export async function handleIncomingMessage(event: WebhookEvent) {
  if (event.type !== "message") return;
  const textMessage = event.message as TextEventMessage;
  const receivedText = textMessage.text.toLowerCase();
  const replyToken = event.replyToken;

  const commandArr = receivedText.split(" ");
  const command = commandArr[0];
  const commandLen = commandArr.length;

  const userId = event.source.userId;
  const userName = commandArr[1];
  if (!userId) return;

  const member = await getMemberDetails(pool, userId);
  const isMemberExist = typeof member !== "undefined";

  // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ <‡∏ä‡∏∑‡πà‡∏≠>
  if (command == "‡∏™‡∏°‡∏±‡∏Ñ‡∏£" && commandLen == 2) {
    if (isMemberExist) {
      const replyMessage = `üò° ‡πÑ‡∏≠...${member.name} ‡∏°‡∏µ User ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ã‡πâ‡∏≥‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏¥...‡∏õ‡∏±‡πä‡∏î‡πÇ‡∏ñ‡πà‡∏ß!`;
      await pushMsg(client, replyToken, replyMessage);
      return;
    }
    await registerNewMember(pool, client, replyToken, userId, userName);
  }

  // Stop procesing if member not register yet
  if (!isMemberExist) return;

  if (command == "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á") {
    const replyMessage = `ü§ñ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á\
      \nüëâ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤ <‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢,‡∏•‡∏≤‡∏Å‡∏¥‡∏à,‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô,hh> <‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≤ 26JAN,26JAN-28JAN> <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 1‡∏ß‡∏±‡∏ô, 3‡∏ß‡∏±‡∏ô, ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÄ‡∏ä‡πâ‡∏≤, ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ö‡πà‡∏≤‡∏¢> <key,nokey>\
      \nüëâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï <id> <key,nokey>\
      \nüëâ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô/‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ <‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô, ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ, ‡∏ß‡∏µ‡∏Ñ‡∏ô‡∏µ‡πâ, ‡∏ß‡∏µ‡∏Ñ‡∏´‡∏ô‡πâ‡∏≤>\
      \nüëâ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô <approve> <'',key,nokey>\
      \nüëâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á member\
      \nüëâapprove <id, ids(8,9)> (‚õî Only Admin)\
      \nüëâ‡∏•‡∏ö <id> (‚õî Only Admin) (‚ö†Ô∏è Developing)\
      \nüëâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ <‡∏ä‡∏∑‡πà‡∏≠>\
      `;
    await pushMsg(client, replyToken, replyMessage);
  }
  // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á <member, happy_hour, leave_schedule>
  else if (command == "‡∏ï‡∏≤‡∏£‡∏≤‡∏á" && commandLen == 2) {
    const tableName = commandArr[1];
    // command validation
    if (!tableLists.includes(tableName)) {
      const replyMessage = `‚õî Table ${tableName} is not exists on database`;
      await pushMsg(client, replyToken, replyMessage);
      return;
    }

    await showTable(pool, client, replyToken, tableName);
  }

  // ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤ <‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó [‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢,‡∏•‡∏≤‡∏Å‡∏¥‡∏à,‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô,hh]> <‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≤ [26JAN]> <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô [1‡∏ß‡∏±‡∏ô, 3‡∏ß‡∏±‡∏ô, ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÄ‡∏ä‡πâ‡∏≤, ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ö‡πà‡∏≤‡∏¢]> <key, nokey>
  else if (command == "‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤") {
    if (
      !(await validateLeaveRequest(
        pool,
        client,
        member.name,
        commandArr,
        commandLen,
        replyToken
      ))
    )
      return;

    await addNewLeaveRequest(pool, client, replyToken, member, commandArr);
  }

  // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô <‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô, approve>
  else if (
    command === "‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" &&
    (commandArr.length === 2 || commandArr.length === 3)
  ) {
    const option = commandArr[1];
    const optionStatus = commandArr.length === 3 ? commandArr[2] : "";

    if (option == "approve")
      await showWaitApprove(pool, client, replyToken, optionStatus);
  }

  // approve <ids ‡πÄ‡∏ä‡πà‡∏ô approve 8 ‡∏´‡∏£‡∏∑‡∏≠ approve 3,4,8,10> (‚õî Only Admin)
  else if (command == "approve" && commandLen == 2) {
    // validate if not admin
    if (member.is_admin == false) {
      const replyMessage = "üò° ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Admin ‡∏°‡∏±‡∏ô Approve ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏î‡πä‡∏∞!";
      await pushMsg(client, replyToken, replyMessage);
      return;
    }
    const option = commandArr[1];
    const ids = option.split(",").map((item) => Number(item.trim()));

    // validate option
    if (ids.length == 1) {
      const id = ids[0];

      if (!(await checkIfIdExist(pool, id.toString()))) {
        const replyMessage = `‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ ID:${id} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`;
        await pushMsg(client, replyToken, replyMessage);
        return;
      }

      await updateApproveFlag(pool, client, replyToken, ids);
    } else if (ids.length > 1) {
      // validate ids
      for (const id of ids) {
        if (!(await checkIfIdExist(pool, id.toString()))) {
          const replyMessage = `‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ ID:${id} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`;
          await pushMsg(client, replyToken, replyMessage);
          return;
        }
      }

      await updateApproveFlag(pool, client, replyToken, ids);
    }
  }
  //üëâ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô <‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô, ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ, ‡∏ß‡∏µ‡∏Ñ‡∏ô‡∏µ‡πâ, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ> (‚õî Developing)
  else if ((command == "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô" || command == "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£") && commandLen == 2) {
    const reportType = commandArr[1];
    // command validation
    if (!validReportTypes.includes(reportType)) {
      const replyMessage = `‚õî ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '${reportType}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`;
      await pushMsg(client, replyToken, replyMessage);
      return;
    }

    if (reportType == "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ") await showListToday(pool, client, replyToken);
    else if (reportType == "‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô")
      await showMyList(pool, client, member.name, replyToken);
    else if (reportType == "‡∏ß‡∏µ‡∏Ñ‡∏ô‡∏µ‡πâ" || reportType == "‡∏ß‡∏µ‡∏Ñ‡∏´‡∏ô‡πâ‡∏≤") {
      const currentWeekDates =
        reportType == "‡∏ß‡∏µ‡∏Ñ‡∏ô‡∏µ‡πâ"
          ? getCurrentWeekDate(new Date(getCurrentDateString()))
          : getCurrentWeekDate(new Date(getNextWeektDateString()));

      const currentWeekStartDate = currentWeekDates[0].date;
      const currentWeekEndDate =
        currentWeekDates[currentWeekDates.length - 1].date;

      const leaveListThisWeeks = await showListThisWeek(
        pool,
        currentWeekStartDate,
        currentWeekEndDate
      );

      // Initialize an object to accumulate members for each day
      let dayMembersMap: { [key: string]: string[] } = {};

      // Function to format date as DDMMM (e.g., 29JAN)
      function formatDate(date: string): string {
        const parts = date.split("-");
        const day = parts[2];
        const monthIndex = parseInt(parts[1], 10) - 1; // Month is 0-indexed in the array
        const month = validUpcaseMonths[monthIndex];
        return `${day}${month}`;
      }

      // Prepare the result string with formatted dates
      let resultString = `üò∂‚Äçüå´Ô∏è ‡πÉ‡∏ï‡∏£‡∏•‡∏≤‡∏ö‡πâ‡∏≤‡∏á ${
        reportType == "‡∏ß‡∏µ‡∏Ñ‡∏ô‡∏µ‡πâ" ? "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ" : "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏´‡∏ô‡πâ‡∏≤"
      }\n\n`;

      currentWeekDates.forEach((weekDate, index) => {
        // Initialize members array for each day
        dayMembersMap[weekDate.day] = [];

        // Format date
        const formattedDate = formatDate(weekDate.date);

        // Populate members for each day
        leaveListThisWeeks.forEach((leave) => {
          if (
            weekDate.date >= leave.leave_start_dt &&
            weekDate.date <= leave.leave_end_dt
          ) {
            dayMembersMap[weekDate.day].push(
              leave.member + "(" + leave.leave_type + ")"
            );
          }
        });

        // Append to result string
        resultString += `${daysColor[index]}${formattedDate}(${
          weekDate.day
        }) : ${dayMembersMap[weekDate.day].join(", ") || ""}\n`;
      });

      await pushMsg(client, replyToken, resultString);
    }
  }
  //üëâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï <id> <key,nokey>
  else if (command == "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" && commandLen == 3) {
    const id = commandArr[1];
    const status = commandArr[2];

    // validation
    if (!validKeyStatus.includes(status)) {
      const replyMessage = `‚ö†Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ñ‡∏µ‡∏¢‡πå '${status}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\
      \n ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ ${validKeyStatus.join(" ")}`;
      await pushMsg(client, replyToken, replyMessage);
      return;
    }

    if (!(await checkIfMyIdExist(pool, member.name, id))) {
      const replyMessage = `‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ ID:${id} ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á '${member.name}'`;
      await pushMsg(client, replyToken, replyMessage);
      return;
    }

    await updateKeyStatus(pool, client, replyToken, id, status);
  } else if (command == "cron") {
    // validate if not admin
    if (member.is_admin == false) {
      const replyMessage = "üò° ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Admin ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ!";
      await pushMsg(client, replyToken, replyMessage);
      return;
    }
    await pushMessage();
  }
}
