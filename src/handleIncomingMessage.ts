import { Client, TextEventMessage, WebhookEvent } from "@line/bot-sdk";
import pg from "pg";
import * as dotenv from "dotenv";
import { validateLeaveRequest } from "./validateLeaveReq";
import {
  addNewLeaveRequest,
  getMemberDetails,
  pushMsg,
  registerNewMember,
  showListToday,
  showTable,
  showWaitApprove,
  updateApproveFlag,
} from "./lineAPI";
import { tableLists, validReportTypes } from "./config";

dotenv.config();
const pool = new pg.Pool();
const client = new Client({
  channelSecret: process.env.CHANNEL_SECRET || "",
  channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN || "",
});

export async function handleIncomingMessage(event: WebhookEvent) {
  if (event.type !== "message") return;
  const textMessage = event.message as TextEventMessage;
  const receivedText = textMessage.text.toLowerCase();
  const replyToken = event.replyToken;

  const commandArr = receivedText.split(" ");
  const command = commandArr[0];
  const commandLen = commandArr.length;

  const userId = event.source.userId;
  const userName = commandArr[1];
  if (!userId) return;

  const member = await getMemberDetails(pool, userId);
  const isMemberExist = typeof member !== "undefined";

  // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ <‡∏ä‡∏∑‡πà‡∏≠>
  if (command == "‡∏™‡∏°‡∏±‡∏Ñ‡∏£" && commandLen == 2) {
    if (isMemberExist) {
      const replyMessage = `üò° ‡πÑ‡∏≠...${member.name} ‡∏°‡∏µ User ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ã‡πâ‡∏≥‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏¥...‡∏õ‡∏±‡πä‡∏î‡πÇ‡∏ñ‡πà‡∏ß!`;
      await pushMsg(client, replyToken, replyMessage);
      return;
    }
    await registerNewMember(pool, client, replyToken, userId, userName);
  }

  //   // TODO: remove
  //   const isAdmin = member.is_admin;
  //   if (!isAdmin) return;
  //   //

  // Stop procesing if member not register yet
  if (!isMemberExist) return;

  if (command == "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á") {
    const replyMessage = `ü§ñ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á\
      \nüëâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ <‡∏ä‡∏∑‡πà‡∏≠>\
      \nüëâ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤ <‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢,‡∏•‡∏≤‡∏Å‡∏¥‡∏à,‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô,hh> <‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≤ 26JAN,26JAN-28JAN> <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 1‡∏ß‡∏±‡∏ô, 3‡∏ß‡∏±‡∏ô, ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÄ‡∏ä‡πâ‡∏≤, ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ö‡πà‡∏≤‡∏¢> <key,nokey>\
      \nüëâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç <id> <status> <key,nokey> (‚õî Developing)\
      \nüëâ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô <‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ, ‡∏ß‡∏µ‡∏Ñ‡∏ô‡∏µ‡πâ, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ> (‚õî Developing)\
      \nüëâ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô <approve>\
      \nüëâapprove <ids ‡πÄ‡∏ä‡πà‡∏ô approve 8 ‡∏´‡∏£‡∏∑‡∏≠ approve 3,4,8,10> (‚õî Only Admin)\
      \nüëâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á <member, happy_hour, leave_schedule>\
      `;
    await pushMsg(client, replyToken, replyMessage);
  }
  // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á <member, happy_hour, leave_schedule>
  else if (command == "‡∏ï‡∏≤‡∏£‡∏≤‡∏á" && commandLen == 2) {
    const tableName = commandArr[1];
    // command validation
    if (!tableLists.includes(tableName)) {
      const replyMessage = `‚õî Table ${tableName} is not exists on database`;
      await pushMsg(client, replyToken, replyMessage);
      return;
    }

    await showTable(pool, client, replyToken, tableName);
  }

  // ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤ <‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó [‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢,‡∏•‡∏≤‡∏Å‡∏¥‡∏à,‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô,hh]> <‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≤ [26JAN]> <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô [1‡∏ß‡∏±‡∏ô, 3‡∏ß‡∏±‡∏ô, ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÄ‡∏ä‡πâ‡∏≤, ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ö‡πà‡∏≤‡∏¢]> <key, nokey>
  else if (command == "‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤") {
    if (
      !(await validateLeaveRequest(client, commandArr, commandLen, replyToken))
    )
      return;

    await addNewLeaveRequest(pool, client, replyToken, member, commandArr);
  }

  // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô <‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô, approve>
  else if (command == "‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" && commandLen == 2) {
    const option = commandArr[1];
    if (option == "approve") await showWaitApprove(pool, client, replyToken);
  }

  // approve <ids ‡πÄ‡∏ä‡πà‡∏ô approve 8 ‡∏´‡∏£‡∏∑‡∏≠ approve 3,4,8,10> (‚õî Only Admin)
  else if (command == "approve" && commandLen == 2) {
    // validate if not admin
    if (member.is_admin == false) {
      const replyMessage = "üò° ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Admin ‡∏°‡∏±‡∏ô Approve ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏î‡πä‡∏∞!";
      await pushMsg(client, replyToken, replyMessage);
      return;
    }
    const option = commandArr[1];
    const ids = option.split(",").map((item) => Number(item.trim()));

    // validate option
    if (ids.length == 1)
      // TODO: validate single approval
      await updateApproveFlag(pool, client, replyToken, ids[0]);

    // TODO: validate multiple approvals
    // TODO: Bulk Update
  }
  //üëâ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô <‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ, ‡∏ß‡∏µ‡∏Ñ‡∏ô‡∏µ‡πâ, ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ> (‚õî Developing)
  else if (command == "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô" && commandLen == 2) {
    const reportType = commandArr[1];
    // command validation
    if (!validReportTypes.includes(reportType)) {
      const replyMessage = `‚õî ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '${reportType}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`;
      await pushMsg(client, replyToken, replyMessage);
      return;
    }

    if (reportType == "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ") await showListToday(pool, client, replyToken);
  }
}
