import { Client } from "@line/bot-sdk";
import pg from "pg";
import { validateInputDate } from "./validateCommon";
import { getRemainingHh } from "../API/hhAPI";
import { pushMsg } from "../utils/sendLineMsg";
import { validHhTypes, validhhAmts } from "../config/config";

export async function validateHhRequest(
  pool: pg.Pool,
  client: Client,
  replyToken: string,
  member: string,
  commandArr: string[]
): Promise<boolean> {
  const hhType = commandArr[1]; // "‡πÄ‡∏û‡∏¥‡πà‡∏°", "‡πÉ‡∏ä‡πâ"
  const hhAmt = commandArr[2]; // 1h,2h,...,40h
  const leaveType = "hh";
  const leaveStartDate = commandArr[3];
  const leaveAmount = commandArr[4];
  const leaveKey = "key";

  if (!validHhTypes.includes(hhType)) {
    // "‡πÄ‡∏û‡∏¥‡πà‡∏°", "‡πÉ‡∏ä‡πâ"
    const replyMessage = `‚ö†Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó hh '${hhType}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\
    \n‚úÖ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ '${validHhTypes.join(", ")}'`;
    await pushMsg(client, replyToken, replyMessage);
    return false;
  }

  if (!validhhAmts.includes(hhAmt)) {
    // 1h,2h,...,40h
    const replyMessage = `‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô hh '${hhAmt}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\
    \n‚úÖ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ '1h,2h,...,40h'`;
    await pushMsg(client, replyToken, replyMessage);
    return false;
  }

  // Validate if remaining HH is enough
  const remainHh = await getRemainingHh(pool, member);
  if (hhType == "‡πÉ‡∏ä‡πâ" && parseInt(hhAmt) > remainHh) {
    const replyMessage = `‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô HH ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠\
    \nüò´ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ ${hhAmt}\
    \nüí© ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${remainHh}h`;
    await pushMsg(client, replyToken, replyMessage);
    return false;
  }

  if (
    !(await validateInputDate(
      pool,
      client,
      replyToken,
      member,
      leaveType,
      leaveStartDate,
      leaveAmount,
      leaveKey
    ))
  )
    return false;

  return true;
}
