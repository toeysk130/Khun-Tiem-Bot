import { addNewHhLeaveRequest } from "../../API/leaveScheduleAPI";
import { UserMetaData } from "../../types/interface";
import { checkIfHhIdExist } from "../../repositories/happyHour";
import { addHhRecord, updateHhApproveFlag } from "../../services/hhService";
import { pushMsg } from "../../utils/sendLineMsg";
import { validateHhRequest } from "../../validations/validateHhReq";
import { client, pool } from "../handleIncomingMessage";

export async function handleHhCommand(
  commandArr: string[],
  userMetaData: UserMetaData
) {
  // Validate the command format (hh <subcommand> <params>)
  if (commandArr.length < 2) {
    return pushMsg(
      client,
      userMetaData.replyToken,
      `‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "hh" ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "hh ‡πÄ‡∏û‡∏¥‡πà‡∏° 1h ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•" ‡∏´‡∏£‡∏∑‡∏≠ "hh ‡πÉ‡∏ä‡πâ 2h ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"`
    );
  }

  const hhSubCommand = commandArr[1];

  switch (hhSubCommand) {
    case "‡πÄ‡∏û‡∏¥‡πà‡∏°":
      await handleAddHhRecord(
        commandArr,
        userMetaData,
        userMetaData.replyToken
      );
      break;
    case "‡πÉ‡∏ä‡πâ":
      await handleUseHhRequest(
        commandArr,
        userMetaData,
        userMetaData.replyToken
      );
      break;
    case "approve":
      await handleHhApproveRequest(
        commandArr,
        userMetaData,
        userMetaData.replyToken
      );
      break;
    default:
      await pushMsg(
        client,
        userMetaData.replyToken,
        `‚õî ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "hh" ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å "${hhSubCommand}" ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: "‡πÄ‡∏û‡∏¥‡πà‡∏°", "‡πÉ‡∏ä‡πâ", "approve"`
      );
      break;
  }
}

// Function to handle "hh ‡πÄ‡∏û‡∏¥‡πà‡∏°"
async function handleAddHhRecord(
  commandArr: string[],
  userMetaData: UserMetaData,
  replyToken: string
) {
  if (commandArr.length < 3) {
    return pushMsg(
      client,
      replyToken,
      `‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "hh ‡πÄ‡∏û‡∏¥‡πà‡∏°" ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "hh ‡πÄ‡∏û‡∏¥‡πà‡∏° 1h ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"`
    );
  }

  const hhAmt = parseInt(commandArr[2]);
  if (isNaN(hhAmt)) {
    return pushMsg(
      client,
      replyToken,
      `‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`
    );
  }

  const description = commandArr.slice(3).join(" "); // ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢

  try {
    await addHhRecord(
      pool,
      client,
      replyToken,
      userMetaData.username,
      "‡πÄ‡∏û‡∏¥‡πà‡∏°",
      hhAmt,
      description
    );
  } catch (error) {
    console.error("Error adding HH record:", error);
    await pushMsg(
      client,
      replyToken,
      `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á Happy Hour ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á`
    );
  }
}

// Function to handle "hh ‡πÉ‡∏ä‡πâ"
async function handleUseHhRequest(
  commandArr: string[],
  userMetaData: UserMetaData,
  replyToken: string
) {
  const isValidRequest = await validateHhRequest(userMetaData, commandArr);
  console.table(isValidRequest);
  // BUG: Prevents reusing of reply token
  if (!isValidRequest) {
    return;
  }

  try {
    await addNewHhLeaveRequest(
      pool,
      client,
      replyToken,
      userMetaData.username,
      commandArr
    );
  } catch (error) {
    console.error("Error processing HH request:", error);
    await pushMsg(
      client,
      replyToken,
      `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÉ‡∏ä‡πâ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á Happy Hour ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á`
    );
  }
}

// Function to handle "hh approve"
async function handleHhApproveRequest(
  commandArr: string[],
  userMetaData: UserMetaData,
  replyToken: string
) {
  if (!userMetaData.isAdmin) {
    return pushMsg(
      client,
      replyToken,
      "üò° ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Admin ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!"
    );
  }

  if (commandArr.length < 3) {
    return pushMsg(
      client,
      replyToken,
      `‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "hh approve" ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "hh approve 8" ‡∏´‡∏£‡∏∑‡∏≠ "hh approve 3,4,8"`
    );
  }

  // Extract IDs and validate them
  const ids = commandArr[2].split(",").map((item) => Number(item.trim()));

  try {
    for (const id of ids) {
      const exists = await checkIfHhIdExist(pool, id.toString());
      if (!exists) {
        return pushMsg(
          client,
          replyToken,
          `‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ ID:${id} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Happy Hour`
        );
      }
    }

    // If all IDs are valid, approve them
    await updateHhApproveFlag(pool, client, replyToken, ids);
    await pushMsg(
      client,
      replyToken,
      `‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Happy Hour ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID: ${ids.join(", ")}`
    );
  } catch (error) {
    console.error("Error approving HH IDs:", error);
    await pushMsg(
      client,
      replyToken,
      `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Happy Hour ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á`
    );
  }
}
