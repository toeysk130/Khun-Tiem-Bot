import { Client } from "@line/bot-sdk";
import pg from "pg";
import {
  monthAbbreviations,
  validKeyStatus,
  validLeaveAmounts,
  validLeaveTypes,
  validMonths,
} from "./config";
import { getIsLeaveDuplicate, pushMsg, updateKeyStatus } from "./lineAPI";

export async function validateLeaveRequest(
  pool: pg.Pool,
  client: Client,
  member: string,
  commandArr: string[],
  commandLen: number,
  replyToken: string
): Promise<boolean> {
  // command validation
  // if (commandLen != 5) {
  //   const replyMessage =
  //     "üôÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ô‡∏∞\
  //     \nüëâüèª‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤ <‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢,‡∏•‡∏≤‡∏Å‡∏¥‡∏à,‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô,hh> <‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô 26JAN ‡∏´‡∏£‡∏∑‡∏≠ 26JAN-28JAN> <‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 1‡∏ß‡∏±‡∏ô, 3‡∏ß‡∏±‡∏ô, ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÄ‡∏ä‡πâ‡∏≤, ‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ö‡πà‡∏≤‡∏¢> <key, nokey>\
  //     \nüëâüèª‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤ ‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô 28JAN 1‡∏ß‡∏±‡∏ô nokey\
  //     \nüëâüèª‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏≤ ‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏ô 30JAN-02FEB 4‡∏ß‡∏±‡∏ô nokey";
  //   await pushMsg(client, replyToken, replyMessage);
  //   return false;
  // }

  const leaveType = commandArr[1];
  const leaveStartDate = commandArr[2];
  const leaveAmount = commandArr[3];
  const leaveKey = commandArr[4];

  if (!validLeaveTypes.includes(leaveType)) {
    const replyMessage = `‚ö†Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏±‡∏ô‡∏•‡∏≤ '${leaveType}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\
      \n ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ ${validLeaveTypes.join(" ")}`;
    await pushMsg(client, replyToken, replyMessage);
    return false;
  }

  {
    if (leaveStartDate.length != 5 && leaveStartDate.length != 11) {
      const replyMessage = `‚ö†Ô∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≤ '${leaveStartDate}' ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\
        \n ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å ‡πÄ‡∏ä‡πà‡∏ô 26JAN ‡∏´‡∏£‡∏∑‡∏≠ 26JAN-28JAN`;
      await pushMsg(client, replyToken, replyMessage);
      return false;
    }
    // ‡∏•‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    if (leaveStartDate.length == 5) {
      const month = leaveStartDate.slice(-3);
      if (!validMonths.includes(month)) {
        const replyMessage = `‚ö†Ô∏è ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô '${leaveStartDate}' ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\
          \n ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ ${validMonths
            .map((month) => month.toUpperCase())
            .join(" ")}`;
        await pushMsg(client, replyToken, replyMessage);
        return false;
      }

      if (!["1‡∏ß‡∏±‡∏ô", "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÄ‡∏ä‡πâ‡∏≤", "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ö‡πà‡∏≤‡∏¢"].includes(leaveAmount)) {
        const replyMessage = `‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤ '${leaveAmount}' ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`;
        await pushMsg(client, replyToken, replyMessage);
        return false;
      }

      // Parse the date strings manually
      const firstDay = parseInt(leaveStartDate.slice(0, 2), 10);
      const monthAbbreviation = leaveStartDate.slice(2, 5);
      const firstMonth = validMonths.indexOf(monthAbbreviation);
      const firstYear = new Date().getUTCFullYear();
      const firstDate = new Date(Date.UTC(firstYear, firstMonth, firstDay));
      const dateString = firstDate.toISOString().split("T")[0]; // Output: '2024-02-02'

      const id = await getIsLeaveDuplicate(
        pool,
        member,
        dateString,
        dateString
      );

      if (id > 0) {
        await updateKeyStatus(pool, client, replyToken, id, leaveKey);
        return false;
      }
    }

    // ‡∏•‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
    if (leaveStartDate.length == 11) {
      const pattern = /^\d{2}[a-z]{3}-\d{2}[a-z]{3}$/i; // Case-insensitive pattern for "26jan-28jan"

      if (!pattern.test(leaveStartDate)) {
        const replyMessage = `‚ö†Ô∏è ‡∏ß‡∏±‡∏ô‡∏•‡∏≤ '${leaveAmount}' ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\
          \n ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡πà‡∏ô 09JAN-13JAN ‡∏´‡∏£‡∏∑‡∏≠ 30JAN-4FEB`;
        await pushMsg(client, replyToken, replyMessage);
        return false;
      }

      if (["1‡∏ß‡∏±‡∏ô", "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÄ‡∏ä‡πâ‡∏≤", "‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏ö‡πà‡∏≤‡∏¢"].includes(leaveAmount)) {
        const replyMessage = `‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤ '${leaveAmount}' ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`;
        await pushMsg(client, replyToken, replyMessage);
        return false;
      }

      const dates = leaveStartDate.split("-");
      const startDate = dates[0];
      const endDate = dates[1];

      if (!validMonths.includes(startDate.slice(-3))) {
        const replyMessage = `‚ö†Ô∏è ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô '${startDate}' ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\
          \n ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ ${validMonths
            .map((month) => month.toUpperCase())
            .join(" ")}`;
        await pushMsg(client, replyToken, replyMessage);
        return false;
      }

      if (!validMonths.includes(endDate.slice(-3))) {
        const replyMessage = `‚ö†Ô∏è ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô '${endDate}' ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\
          \n ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ ${validMonths
            .map((month) => month.toUpperCase())
            .join(" ")}`;
        await pushMsg(client, replyToken, replyMessage);
        return false;
      }

      // Parse the date strings manually
      const firstDay = parseInt(startDate.slice(0, 2));
      const firstMonth = monthAbbreviations[startDate.slice(2, 5)];
      const firstYear = new Date().getUTCFullYear();

      const secondDay = parseInt(endDate.slice(0, 2));
      const secondMonth = monthAbbreviations[endDate.slice(2, 5)];
      const secondYear = new Date().getUTCFullYear();

      // Create Date objects with UTC values
      const firstDate = new Date(Date.UTC(firstYear, firstMonth, firstDay));
      const secondDate = new Date(Date.UTC(secondYear, secondMonth, secondDay));

      // Compare the dates
      if (secondDate < firstDate) {
        const replyMessage = `‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\nend date: ${endDate} ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ start date: ${startDate}'`;
        await pushMsg(client, replyToken, replyMessage);
        return false;
      }
    }
  }

  if (!validLeaveAmounts.includes(leaveAmount)) {
    const replyMessage = `‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤ '${leaveAmount}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\
        \n ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ ${validLeaveAmounts.join(" ")}`;
    await pushMsg(client, replyToken, replyMessage);
    return false;
  }

  if (!validKeyStatus.includes(leaveKey)) {
    const replyMessage = `‚ö†Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ñ‡∏µ‡∏¢‡πå '${leaveKey}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\
          \n ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ ${validKeyStatus.join(" ")}`;
    await pushMsg(client, replyToken, replyMessage);
    return false;
  }

  return true;
}
